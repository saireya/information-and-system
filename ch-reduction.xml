<?xml version="1.0" encoding="utf-8"?>
<chapter xml:id="ch-reduction">
	<title>還元</title>
	<introduction>
		<p>本章では、創発と対置される概念としての還元について述べる。
		創発と還元は対立するとされるが、一方が正しいあるいは重要であるということではなく、いずれも重要な概念である。
		そこで本章では、まず集合やシステムを複数の部分に分解することを検討する。
		その上で、システムからみた還元の概念と、より身近な問題解決において還元が有効な事例を挙げる。</p>
	</introduction>

	<section xml:id="sec-reduction-decompose">
		<title>システムの分解</title>
		<p>まず、集合を複数の部分集合に分割することを考える。
		集合<m>A</m>と集合<m>A_1, \cdots, A_n</m>があり、<m>A = A_1 \cup \cdots \cup A_n</m>とする。
		ここで、<m>A_1, \cdots, A_n</m>は互いに共通部分を持たない、つまり任意の<m>i, j</m>について<m>A_i \cap A_j = \emptyset</m>が成り立つとする。
		このとき、<m>A_1, \cdots, A_n</m>は<dfn>互いに素</dfn>な集合であるといい、<m>A_1, \cdots, A_n</m>は<m>A</m>の<dfn>分割</dfn>もしくは<ruby r="ちょくわ"><dfn>直和</dfn></ruby>であるという。
		集合を直和に分解することを強調して、記号「<m>\cup</m>」ではなく記号「<m>\sqcup</m>」を使い、<m>A = A_1 \sqcup \cdots \sqcup A_n</m>と表すことがある。
		このように「漏れなく重複なく分割する」ことを、一般的には<dfn en="Mutually Exclusive and Collectively Exhaustive">MECE</dfn>と呼ぶ。
		集合には創発性がないため、このように素朴に分割できる。</p>
		<p>次に、システムにおいても集合と同様に、分割を定義することを考える。
		システム<m>S</m>とシステム<m>S_1, \cdots, S_n</m>があり、<m>S = S_1 \cup \cdots \cup S_n</m>とする。
		ここで、<m>S_1, \cdots, S_n</m>が互いに共通部分を持たないとすると、システム<m>S</m>は分割可能だといえる。</p>
		<p>だが、システムは「要素が互いに関連する」集合であり、創発性がある。
		もしシステムの中に分割可能な部分が存在すると仮定すれば、その部分はシステムの他の部分と関連していないため、システムの定義に反しており、別のシステムだといえる。
		従ってシステムに対しては、集合のような素朴な分割は行えない。</p>
		<p>Simonは、システム内部の要素間の関連性には強弱があり、互いに強い関連性をもつ部分と、互いに弱い関連性しかもたない部分があることに着目した<xref ref="bib-simon2"/>。
		ここで、<m>S_1, \cdots, S_n</m>が「互いに弱い関連性しかもたない」とは、任意の<m>i, j</m>について<m>S_i \cap S_j ≒ \emptyset</m>が成り立つことである。
		このとき、<m>S_1, \cdots, S_n</m>は「<em>ほとんど</em>互いに素」であり、<m>S ≒ S_1 \sqcup \cdots \sqcup S_n</m>とみなせる。
		Simonはこうしたシステム<m>S</m>は<dfn en="nearly decomposable">準分解可能</dfn>だといい、<m>S_1, \cdots, S_n</m>を<m>S</m>の<dfn en="subsystem">部分システム</dfn>と呼んだ。
		準分解可能なシステムでは、システムを複数の部分システムに分解しても、失われる創発性は無視できるほど小さいものとみなせる。</p>
		<!--TODO: 分割/準分解の図-->
	</section>

	<section xml:id="sec-reduction-eg">
		<title>還元の例</title>
		<p>準分解可能なシステムは、最も上位のシステムから下位の部分システムに枝分かれしていく<dfn en="tree">木構造</dfn>のグラフで表せるため、木構造を順に辿って解を探す、<dfn en="search">探索</dfn>を行うことも多い。
		探索は場合の数の数え上げなど日常的に使う他、囲碁や将棋、チェスなどの機械によるゲームプレイで、次の手を決めるために使うこともある。</p>
		<p>このように、<em>分割や分解により対象の複雑性を低下させることで、問題の解決や現象の解明ができる</em>と考える立場を<dfn en="reductionism">還元主義</dfn>といい、Descartesらが有名である<xref ref="bib-descartes"/><xref ref="bib-descartes-j"/>。</p>

		<remark>
			<title>探索</title>
			<statement>
				<p>ある問題の解を求める最も単純な方法は、考えうるすべての組み合わせを総当たりで試す<dfn>全数探索</dfn>である。
				特に、暗号の解読や認証の通過を目的に行う全数探索は、<dfn en="brute-force attack">総当たり攻撃</dfn>と呼ばれる。
				全数探索は単純で古典的だが、解の範囲がある程度限定される場合には、人手でも行える他、コンピュータを使って機械的にも行えるため、十分有効な方法である。</p>
				<p>全数探索のうち、一つの場合に注目してより<em>深く</em>探索する<dfn>深さ優先</dfn>探索は、注目した部分に解が含まれる場合は高速に解を発見できるが、注目した部分に解が含まれない場合は探索に長時間を要する。
				深さ優先探索は特定の場合を深めることから、垂直思考と類似している。</p>
				<p>また、複数の場合を順に調べてより<em>広く</em>探索する<dfn>幅優先</dfn>探索は、解が比較的浅い部分にある場合は高速に解を発見できるが、解が深い部分にある場合は探索に長時間を要する。
				幅優先探索は多数の場合を検討することから、水平思考と類似している。</p>
				<p>実用上は、深さ優先と幅優先を組み合わせた方法や、評価関数に基づいて次に探索すべき部分を決定する方法などが使われる。
				また、すべての場合を検討するのではなく、<em>確率的に場合を選択</em>し、選択した場合のみを検討する<dfn>Monte Carlo法</dfn>などもよく使われる。<br/>
				<figure xml:id="fig-search">
					<image source="image/search" width="50%"/>
					<caption>探索と水平思考・垂直思考</caption>
				</figure></p>
			</statement>
		</remark>
	</section>

	<section xml:id="sec-reduction-purpose">
		<title>還元の目的</title>
		<!--TODO: chunk,取り組む問題の明確化/具体化,機能的分化 -->
	</section>

</chapter>
