<?xml version="1.0" encoding="utf-8"?>
<chapter xml:id="ch-reduction">
	<title>還元</title>
	<introduction>
		<p>本章では、対象を集合とみなして分割する、還元主義に基づく分析について述べる。</p>
		<p><xref ref="sec-reduction-bg"/>節では還元主義の背景を述べ、<xref ref="sec-reduction-def"/>節で還元を定義する。
		<xref ref="sec-reduction-cond"/>節では適切な還元を行う条件を述べ、<xref ref="sec-reduction-eg"/>節では還元の例を示す。</p>
	</introduction>

	<section xml:id="sec-reduction-bg">
		<title>還元主義</title>
		<p>日本語でも「『分ける』ことで『分かる』」というように、還元主義は問題解決の最も基本となる方針である。
		<ruby r="デカルト">Descartes</ruby>も『方法序説』で、<q ref="bib-descartes-j">問題のおのおのを、できるかぎり多くの、しかも問題をよりよく解くために必要なだけの小部分に分ける</q>ことを、科学の基本的な規則として示している<xref ref="bib-descartes"/><xref ref="bib-descartes-j"/>。</p>
		<p>また化学の分野では、<ruby r="ドルトン">Dalton</ruby>(1808)は、物質が<dfn en="atom" strong="0" r="げんし">原子</dfn>という粒子からなるという<dfn strong="0" r="げんしせつ">原子説</dfn>を提案した<xref ref="bib-dalton"/>。
		Avogadro(1811)は原子説を発展させ、物質が<dfn en="molecule" strong="0" r="ぶんし">分子</dfn>という粒子からなるという<dfn strong="0" r="ぶんしせつ">分子説</dfn>を提案した<xref ref="bib-avogadro"/><xref ref="bib-avogadro-e"/>。
		原子説や分子説により、物質を構成する原子や分子を分析することで、物質の性質を分析できることが明らかになった。</p>
		<p>このように「分ける」ことが必要となる背景には、人間が記憶し処理できる複雑さの限界がある。
		Millerによれば、人間が作業記憶で覚えておける事柄は、個人差はあるものの7個程度であるとされる<xref ref="bib-miller"/>。
		これより多くの事柄を記憶するには、複数の事柄を<dfn en="chunk">チャンク</dfn>と呼ばれる単位に関連付けて覚える、<dfn en="chunking">チャンク化</dfn>という方法が必要になる。
		そのため、世界の状況を理解するために、世界の事象をチャンクに対応する単位に分割することが必要になると考えられる。</p>
	</section>

	<section xml:id="sec-reduction-def">
		<title>還元の定義</title>
		<p>還元主義に基づく分析では、対象<m>A</m>をいくつかの要素からなる<dfn en="set" r="しゅうごう">集合</dfn>とみなす。
		その上で、対象を複数の集合<m>A_1, A_2, \cdots, A_n</m>に分割して分析する。
		この分割を<dfn en="reduction" r="かんげん">還元</dfn>という。</p>

		<definition>
			<title>還元</title>
			<statement>
				<m>A</m>を集合とし、<m>A_1, \cdots, A_n (\subset A)</m>を<m>A</m>の部分集合とする。
				<m>A</m>を<m>A_1, \cdots, A_n</m>に分割することを、<m>A</m>を<m>A_1, \cdots, A_n</m>に<dfn en="reduction" r="かんげん">還元</dfn>するという。
			</statement>
		</definition>

		<p>なお、<m>A = \{ a_i | i = 1, \cdots, n \}</m>とするとき、集合の要素を1つずつ含む部分集合<m>A_1 = \{ a_1 \}, \cdots, A_n = \{ a_n \}</m>を定義することもできるので、集合を個々の要素に分割することも還元という。</p>
	</section>

	<section xml:id="sec-reduction-cond">
		<title>還元の条件</title>
		<introduction>
			<p>還元主義に基づく分析では、複雑な対象をより細かい対象に分割し、元の対象よりも単純な分割後の対象を分析することで、元の対象を理解できる。
			一方で、適切な分割を行わなければ、検討すべき対象を見落としたり、重要な部分を見過ごしたりする可能性がある。
			そのため、還元による分析の際は、分割が適切かどうかを検討する必要がある。</p>
		</introduction>

		<subsection xml:id="ssec-reduction-em">
			<title>還元性</title>
			<p>ある集合<m>A</m>を、部分集合<m>A_1, \cdots, A_n (\subset A)</m>に分割できるとする。
			ある性質について還元主義で分析するためには、まずその性質について、集合<m>A</m>に還元性があることが必要である。</p>
			<definition>
				<title>還元性</title>
				<statement>
					集合<m>A</m>に対して、部分集合<m>A_1, \cdots, A_n (\subset A)</m>があるとする。
					<m>A</m>や<m>A_i</m>がもつある性質を数値化する関数を<m>m</m>とおくとき、
					<ul>
						<li><m>m(A) =    m(A_1) + \cdots + m(A_n)</m>となるなら、<m>A</m>はその性質について<dfn r="かんげんせい">還元性</dfn>があるという。</li>
						<li><m>m(A) \neq m(A_1) + \cdots + m(A_n)</m>となるなら、<m>A</m>はその性質について<dfn r="そうはつせい">創発性</dfn>があるという。</li>
					</ul>
				</statement>
			</definition>
		</subsection>

		<subsection xml:id="ssec-reduction-mece">
			<title>MECE</title>
			<p>ある性質について還元性のある集合<m>A</m>は、その性質について集合を分割することができる。
			このとき、<m>A = A_1 \cup \cdots \cup A_n</m>と分割できるが、この分割が適切な分割だとは限らない。
			図<xref ref="fig-system-2d-set-ce"/>、図<xref ref="fig-system-2d-set-me"/>、図<xref ref="fig-system-2d-set-mece"/>に、分割で起こりうる可能性を示す。</p>
			<p><m>A</m>の要素のうち、<m>A_1, \cdots, A_n</m>に<em>含まれない要素があり、図<xref ref="fig-system-2d-set-ce"/>のように「漏れ」が生じる</em>ことがありうる。
			分割に「漏れ」があると、必要な要素を見落として分析することになり、正しい解に到達しない。</p>
			<p>また、<m>A_1, \cdots, A_n</m>に<em>同じ要素を含む集合があり、図<xref ref="fig-system-2d-set-me"/>のように「重複」が生じる</em>ことがありうる。
			分割に「重複」があると、必要な要素を複数回分析することになり、効率の良い分析ができない。</p>
			<p>以上のような誤りを避けると、図<xref ref="fig-system-2d-set-mece"/>のように<m>A</m>を<strong>漏れなく(Collectively Exhaustive)重複なく(Mutually Exclusive)分割</strong>する<m>A_1, \cdots, A_n</m>をとることができる。</p>
			<sidebyside width="25%">
				<figure xml:id="fig-system-2d-set-ce">
					<image source="image/system-2d-set-ce"/>
					<caption>漏れがある場合</caption>
				</figure>
				<figure xml:id="fig-system-2d-set-me">
					<image source="image/system-2d-set-me"/>
					<caption>重複がある場合</caption>
				</figure>
				<figure xml:id="fig-system-2d-set-mece">
					<image source="image/system-2d-set"/>
					<caption>適切な分割(MECE)</caption>
				</figure>
			</sidebyside>
			<definition>
				<title>Mutually Exclusive and Collectively Exhaustive (MECE)</title>
				<statement>
					集合<m>A</m>に対して、部分集合<m>A_1, \cdots, A_n (\subset A)</m>があるとする。
					このとき、次の2つの条件を満たすならば、<m>A_1, \cdots, A_n</m>は<m>A</m>の<dfn en="Mutually Exclusive and Collectively Exhaustive">MECE</dfn>な分割、または<dfn r="ちょくわ" ruby="1">直和</dfn>であるという。
					<ul>
						<li>任意の<m>i, j (i \neq j)</m>について、<m>A_i \cap A_j = \emptyset</m>が成り立つ(<em>Mutually Exclusive</em>)<br/>
							(このとき、<m>A_1, \cdots, A_n</m>は<dfn r="たがいにそ">互いに素</dfn>な集合であるという)</li>
						<li>任意の<m>a \in A</m>について、<m>a \in A_i</m>となるような<m>i (= 1, \cdots, n)</m>が存在する(<em>Collectively Exhaustive</em>)</li>
					</ul>
				</statement>
			</definition>

			<note>
				<title>「互いに素」を表す記法</title>
				<statement>
					<m>A_i</m>と<m>A_j</m>が互いに素な集合であるとき、<m>A_i</m>と<m>A_j</m>の和集合<m>A_i \cup A_j</m>を、互いに素なことを強調して記号「<m>\sqcup</m>」を使い、<m>A_i \sqcup A_j</m>と表すことがある。
					同様に、<m>A = A_1 \cup \cdots \cup A_n (= \bigcup_{i=1}^n A_i)</m>となる分割が直和のとき、<m>A = A_1 \sqcup \cdots \sqcup A_n (= \bigsqcup_{i=1}^n A_i)</m>と表すことがある。
				</statement>
			</note>
		</subsection>
	</section>

	<section xml:id="sec-reduction-eg">
		<title>還元の例</title>
		<p>還元の例には、大きく複雑な作業をより小さな作業に分割した<dfn en="Work Breakdown Structure">WBS</dfn>や、異なる機能を持つ複数の部門からなる組織の組織図にあたる<dfn en="Organization Breakdown Structure">OBS</dfn>などがある。
		図<xref ref="fig-reduction-obs"/>にOBSの例として、企業の組織図の例を示す。
		WBSやOBSの作成時には、作業の見落としや組織の重複が生じないよう、MECEな分割を行うことが重要である。</p>
		<figure xml:id="fig-reduction-obs">
			<image source="image/reduction-obs" width="50%"/>
			<caption>OBSの例(企業の組織図の例)</caption>
		</figure>
		<p>また、問題解決の場面では、そのままで解決できない<em>複雑で大規模な問題を、より小さく単純な問題に分割</em>し、分割した問題を解く<dfn en="divide and conquer method" r="ぶんかつとうちほう">分割統治法</dfn>が行われる。
		分割統治法は、歴史上では古代ローマ帝国の統治にも遡ることができるが、数学の問題での場合分けなど、身近な場面で使うことも多い。</p>
	</section>

		<!--TODO: 定義・階層・抽象化・chunk -->

	<section xml:id="sec-reduction-model">
		<title>モデル</title>
		<p>Wilson<xref ref="bib-wilson"/>によれば、<dfn en="model">モデル</dfn>とは<em>ある人のある状況に関する明示された解釈</em>である。
		また、<em>モデルを作成</em>することを<dfn en="modeling">モデリング</dfn>という。</p>
		<p>定義に<q ref="bib-wilson">ある人の</q>とあるように、モデルには状況の解釈を行う<em>人間が存在</em>している。
		モデルは、その人間の意思に基づいて、現象をある特定の側面から分析したものである<xref ref="bib-kodama"/>。
		即ち、モデルは唯一絶対のものではなく、解釈する人間が<em>現象のどの部分に意味を見いだすか</em>によって現象の<em>本質は変化</em>し、できあがるモデルも変化する。</p>
		<p>構造を示すモデルを表現するためには、文章よりも<dfn r="ず">図</dfn>を使うのが適当である。
		一般的には、要素を実体として四角や丸などの図形で表し、要素間の関連を、実体を結ぶ矢印などの線で表現する。
		図の標準規格としては<dfn strong="0" abbr="UML">Unified Modeling Language</dfn><xref ref="bib-uml"/>などが知られているが、分野やモデルの種類により、様々な種類の図が使われる。</p>
	</section>
</chapter>
