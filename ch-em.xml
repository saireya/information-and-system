<?xml version="1.0" encoding="utf-8"?>
<chapter xml:id="ch-em">
	<title>還元と創発</title>
	<introduction>
		<p>本章では、科学における基本的な現象である、還元と創発について述べる。</p>
		<p><xref ref="sec-em-bg"/>節では、科学における見方としての還元主義と創発主義について述べる。
		<xref ref="sec-em-reduction"/>節では還元について、<xref ref="sec-em-emergence"/>節では創発について述べる。
		<xref ref="sec-em-gen"/>節では、創発のために用いる具体的な方法について述べる。</p>
	</introduction>

	<section xml:id="sec-em-bg">
		<title>還元主義と創発主義</title>
		<p>近代までの科学では、複雑な対象を分析する立場として、還元主義と創発主義という2つの立場があった。</p>
		<p>還元主義では、複雑な対象を分析するときに、対象を<em>より単純な複数の要素に分割</em>し、個々の要素について分析することで、全体を解明するという手法が取られてきた<xref ref="bib-descartes"/><xref ref="bib-descartes-j"/>。
		例えば、<ruby r="ドルトン">Dalton</ruby>(1808)は、物質が<dfn en="atom" strong="0">原子</dfn>という粒子からなるという<dfn strong="0">原子説</dfn>を提案した<xref ref="bib-dalton"/>。
		Avogadro(1811)は原子説を発展させ、物質が<dfn en="molecule" strong="0">分子</dfn>という粒子からなるという<dfn strong="0">分子説</dfn>を提案した<xref ref="bib-avogadro"/><xref ref="bib-avogadro-e"/>。
		このように、対象をより単純な複数の要素に分割することを<dfn en="reduction">還元</dfn>といい、還元により現象を解明できるとする立場を<dfn>還元主義</dfn>という。</p>
		<p>だが、完全には<em>解明されていない対象を還元主義で分析すると、重要な部分を見落とす</em>ことがある。
		例えば、Daltonの原子説に基づいて気体の反応を分析すると、原子が結合して分子を形成するという性質を見落としているため、明らかな矛盾が生じる。
		この場合はAvogadroの分子説で正しく説明できるが、自然界の現象には、完全には解明できていないものや、解明することが困難なものが多くある。</p>
		<p>一方の<dfn>創発主義</dfn>は、<em>未解明の対象</em>や、<em>要素が互いに作用して新たな性質が生じる対象</em>を分析するための考え方である。
		創発主義自体は新しい立場ではなく、<ruby r="アリストテレス">Aristotle</ruby>は全体と部分の違いを考察<xref ref="bib-aristotle-e1"/><xref ref="bib-aristotle-e2"/><xref ref="bib-aristotle-j"/>し、「全体」には、個々の要素にない性質が生じることを述べている。
		但し、近代までの創発主義は、予測できない性質が急に現れることを超科学的に説明していたため、非科学的な面が含まれていた。</p>
		<p>Broadは、要素<m>A, B, C</m>からなる集合に特徴的な性質が、要素<m>A, B, C</m>が単独で示す性質や、それらが他の集合に含まれるときの性質から<em>理論的に演繹できない</em>性質を<dfn en="emergence">創発</dfn>性と定義<xref ref="bib-broad"/>した。
		ここで「理論的に」というのは、あくまで<em>その時点の科学理論では説明できない</em>ことを意味している。
		つまり、<em>あらゆる現象は本来、還元的に説明できる</em>という前提に立ちつつ、現時点で人間が持つ理論では説明できないことを創発性と呼んでいる<xref ref="bib-malaterre"/>。
		このように、創発の概念は曖昧さを含むものの、未解明の現象が科学的に説明されるまでの、過渡段階における説明を与える理論として有用である。</p>

		<definition>
			<title>還元と創発</title>
			<statement>
				集合<m>A = \{ a_i | i = 1, \cdots, n \}</m>について、<m>A</m>や<m>a_i</m>がもつある性質を数値化する関数を<m>m</m>とおく。
				このとき、
				<ul>
					<li><m>m(A) =    m(a_1) + \cdots + m(a_n)</m>となるなら、<m>A</m>はその性質について<dfn>還元性</dfn>があるという。</li>
					<li><m>m(A) \neq m(a_1) + \cdots + m(a_n)</m>となるなら、<m>A</m>はその性質について<dfn>創発性</dfn>があるという。</li>
				</ul>
			</statement>
		</definition>
	</section>

	<section xml:id="sec-em-reduction">
		<title>還元</title>
		<p>ある性質について還元性のある集合<m>A</m>は、その性質について集合を分解することができる。
		そのため、<m>A</m>はいくつかの部分集合<m>A_1, \cdots, A_n (\subset A)</m>の和集合として、<m>A = A_1 \cup \cdots \cup A_n</m>と分解することができる。
		このとき、<m>A</m>には還元性があるので、<m>A</m>を「漏れなく重複なく分解する」ような<m>A_1, \cdots, A_n</m>をとることができる。</p>

		<definition>
			<title>Mutually Exclusive and Collectively Exhaustive (MECE)</title>
			<statement>
				集合<m>A</m>に対して、部分集合<m>A_1, \cdots, A_n (\subset A)</m>があるとする。
				このとき、次の2つの条件を満たすならば、<m>A_1, \cdots, A_n</m>は<m>A</m>の<dfn en="Mutually Exclusive and Collectively Exhaustive">MECE</dfn>な分解、または<ruby r="ちょくわ"><dfn>直和</dfn></ruby>であるという。
				<ul>
					<li>任意の<m>i, j</m>について、<m>A_i \cap A_j = \emptyset</m>が成り立つ(<em>Mutually Exclusive</em>)<br/>
						(このとき、<m>A_1, \cdots, A_n</m>は<dfn>互いに素</dfn>な集合であるという)</li>
					<li>任意の<m>a \in A</m>について、<m>a \in A_i</m>となるような<m>i (= 1, \cdots, n)</m>が存在する(<em>Collectively Exhaustive</em>)</li>
				</ul>
				<m>A_1, \cdots, A_n</m>が<m>A</m>の直和であるとき、このことを強調するため、記号「<m>\cup</m>」ではなく記号「<m>\sqcup</m>」を使い、<m>A = A_1 \sqcup \cdots \sqcup A_n</m>と表すことがある。
			</statement>
		</definition>

		<p>還元の例には、大きく複雑な作業をより小さな作業に分解した<dfn en="Work Breakdown Structure">WBS</dfn>や、異なる機能を持つ複数の部門からなる組織の組織図にあたる<dfn en="Organization Breakdown Structure">OBS</dfn>などがある。
		このとき、作業の見落としや組織の重複が生じないよう、MECEな分解を行うことが重要である。
		また、問題解決の場面では、そのままで解決できない<em>複雑で大規模な問題を、より小さく単純な問題に分割</em>し、分割した問題を解く<dfn en="divide and conquer method">分割統治法</dfn>が行われる。
		分割統治法は、歴史上では古代ローマ帝国の統治にも遡ることができるが、数学の問題での場合分けなど、身近な場面で使うことも多い。</p>
	</section>

	<section xml:id="sec-em-emergence">
		<title>創発</title>
		<p>個々の要素が相互作用して作られる、<em>創発の結果として生じた新たな情報</em>を<dfn en="idea">アイデア</dfn>という。</p>
		<p>Youngはアイデアを、<strong>既存の要素の新たな組み合わせ</strong>だと述べている<xref ref="bib-young"/><xref ref="bib-young-j"/>。
		あらゆる発想は全く何もないところから湧き出すのではなく、意識的であれ無意識的であれ、既知のものを組み合わせて生まれる。
		そのためYoungは、アイデアを生み出すためには次の2つが必要だとしている。</p>
		<ul>
			<li>「既存の要素」に関する<em>知識</em><br/>
				アイデアを生み出すには、組み合わせる元になる「既存の要素」について、現状でどのようなものが存在し、何が実現されていないのかといった、相応の知識が必要となる。
				特に、複数の「既存の要素」を組み合わせることから、複数の分野についての専門的な知識が必要である。</li>
			<li>物事の<em>関連性</em>を見つけ出す能力<br/>
				既存の知識の組み合わせ方は無数にあるが、そこから有用な組み合わせを見出すには、どの要素が関連するかを見出す必要がある。
				物事の表層の類似性に囚われず、その深層にある繋がりに着目することで、強引なこじつけではなく、新鮮で自然な関連性を見出せる。</li>
		</ul>
		<p>アイデアは、それまで存在しなかった、人間にとって意味のある新たな情報であり、創発により社会が発展するといえる。
		<ruby r="シュンペーター">Schumpeter</ruby>は、このように新たな組み合わせを生じさせることを<dfn en="innovation">イノベーション</dfn>と呼び、社会発展の源泉だとした<xref ref="bib-schumpeter"/>。</p>
	</section>

	<section xml:id="sec-em-gen">
		<title>創発の方法</title>
		<introduction>
			<p>具体的に創発を行うためには、次の2段階を経る必要がある<xref ref="bib-guilford"/>。</p>
			<ol>
				<li><strong>思考を広げる</strong>(<dfn en="divergent">発散</dfn>する)</li>
				<li><strong>思考を深める</strong>(<dfn en="convergent">収束</dfn>する)</li>
			</ol>
			<p>このときに重要なのが、<strong>思考の発散と収束を同時には行わず、思考を発散させた後に収束させる</strong>ことである。
			つまり、「1つの案が出たらそれが良いかを検討し、ダメなら次の案を考える」のではなく、「考えられる案をすべて挙げた後で、それらの良し悪しを考える」のが良いとされる。
			このように2つの段階に分ける理由として、次のものが挙げられる。</p>
			<ul>
				<li>実際の場面では限られた時間の中で創発を行う必要があるが、思考の発散と収束を交互に行うと、<em>個々の案の吟味に時間がかかって良い案に辿り着かず</em>、結局何もアイデアが出ないということが起こりうる。</li>
				<li>思考の発散と収束を交互に行うと、人間が<em>思考を切り替えるのに時間がかかる</em>ため、創発の効率自体が低くなる。</li>
				<li>思考の発散と収束を交互に行うと、思考やコミュニケーションが同じ範囲を何度も行き来するため、<em>アイデアの幅が広まらない</em>。</li>
				<li>思考の収束は批判的な姿勢で行う必要があるため、思考の発散と収束を交互に行うと、<em>思考が萎縮</em>して突飛なアイデアが生まれにくくなる。</li>
			</ul>
		</introduction>

		<subsection xml:id="ssec-em-divergent">
			<title>思考の発散</title>
			<p>思考を発散させる段階では、Youngのいう「既存の要素」を挙げる必要がある。
			これを機械的に行おうとすると、データベースなどに含まれるキーワードをすべて列挙することになるが、膨大な時間がかかる上に、挙げた要素が多くなりすぎて人間では処理しきれない。
			そのため、その場にいる人間が思考やコミュニケーションを通して思いつくことを挙げる中で、徐々に思考を広げる方法をとるのが一般的である。</p>
			<p>Osborn<xref ref="bib-osborn"/>による<dfn>Brainstorming</dfn>は、集団で特定のテーマについてアイデアを出し、それぞれの思考の成果を付箋などに書き出して集積する方法である。
			アイデアの質より量を優先し、突飛なアイデアを歓迎することで、より斬新な創発を行う。</p>
			<p>また、de Bonoによる<dfn en="lateral thinking">水平思考</dfn>は、非論理的であってもより多くのアイデアを生み出すための方法である<xref ref="bib-debono"/>。
			目的とする創発を達成するため、伝統や慣習に基づく暗黙の仮定を排除し、あらゆる可能性を考慮することで、斬新なアイデアを生み出す。</p>
		</subsection>

		<subsection xml:id="ssec-em-convergent">
			<title>思考の収束</title>
			<p>思考を収束させる段階では、Youngのいう「関連性」を見出す必要がある。</p>
			<p>川喜田次郎は、Brainstormingなどで使った付箋のうち、類似するものをまとめて名前をつけることを繰り返す方法を提案した。この方法は、川喜田のイニシャルから<dfn>KJ法</dfn>と呼ばれる。</p>
			<p>またde Bonoは、収束の段階では、正しい仮定に基づいて論理を展開する論理的思考が必要だとし、これを水平思考と対比させて<dfn en="vertical thinking">垂直思考</dfn>と呼んだ<xref ref="bib-debono"/>。</p>
		</subsection>
	</section>

</chapter>
